name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      run: npm ci
      working-directory: ./backend
    
    - name: Run backend linting
      run: npm run lint
      working-directory: ./backend
      continue-on-error: true
    
    - name: Run backend unit tests
      run: npm test -- --coverage
      working-directory: ./backend
    
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
    
    - name: Run backend performance tests
      run: npm test -- --testNamePattern="Performance"
      working-directory: ./backend
      continue-on-error: true

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./frontend
    
    - name: Run frontend linting
      run: npm run lint
      working-directory: ./frontend
      continue-on-error: true
    
    - name: Run frontend unit tests
      run: npm test
      working-directory: ./frontend
    
    - name: Build frontend
      run: npm run build
      working-directory: ./frontend
    
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install root dependencies
      run: npm ci
    
    - name: Install backend dependencies
      run: npm ci
      working-directory: ./backend
    
    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./frontend
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Build frontend for E2E tests
      run: npm run build
      working-directory: ./frontend
    
    - name: Run E2E tests
      run: npx playwright test
      env:
        CI: true
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
    
    - name: Upload E2E test videos
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-videos
        path: test-results/
        retention-days: 30

  visual-regression-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install backend dependencies
      run: npm ci
      working-directory: ./backend
    
    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./frontend
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Build frontend
      run: npm run build
      working-directory: ./frontend
    
    - name: Run visual regression tests
      run: npx playwright test visual-regression.spec.ts
      env:
        CI: true
    
    - name: Upload visual regression results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: visual-regression-report
        path: test-results/
        retention-days: 30

  docker-build-test:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: personal-reading-tracker:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 3000:3000 personal-reading-tracker:test
        sleep 10
        curl -f http://localhost:3000/health || exit 1
        docker stop test-container
        docker rm test-container

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true