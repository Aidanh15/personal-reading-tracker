# Multi-stage build for Personal Reading Tracker
# Optimized specifically for Raspberry Pi ARM64 deployment

# Stage 1: Build frontend
FROM --platform=linux/arm64 node:20-alpine AS frontend-builder

# Set working directory
WORKDIR /app/frontend

# Copy package files first for better caching
COPY frontend/package*.json ./

# Install dependencies with ARM64 optimizations
RUN npm install --prefer-offline --no-audit --no-fund

# Copy frontend source code
COPY frontend/ ./

# Build the frontend application with production optimizations
RUN npm run build

# Stage 2: Build backend
FROM --platform=linux/arm64 node:20-alpine AS backend-builder

# Install build dependencies for native modules (better-sqlite3)
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    sqlite-dev \
    && ln -sf python3 /usr/bin/python

# Set working directory
WORKDIR /app/backend

# Copy package files first for better caching
COPY backend/package*.json ./

# Install all dependencies with ARM64 optimizations
RUN npm ci --prefer-offline --no-audit --no-fund

# Copy backend source code
COPY backend/ ./

# Build the backend application
RUN npm run build

# Remove dev dependencies and clean cache to reduce size
RUN npm ci --only=production --prefer-offline --no-audit --no-fund && \
    npm cache clean --force

# Stage 3: Production image optimized for Raspberry Pi
FROM --platform=linux/arm64 node:20-alpine AS production

# Install system dependencies for better container management and ARM64 compatibility
RUN apk add --no-cache \
    dumb-init \
    curl \
    tini \
    && rm -rf /var/cache/apk/* \
    && rm -rf /tmp/*

# Create app user for security (non-root)
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 -G nodejs

# Set working directory
WORKDIR /app

# Copy built backend application
COPY --from=backend-builder --chown=nodejs:nodejs /app/backend/dist ./backend/dist
COPY --from=backend-builder --chown=nodejs:nodejs /app/backend/node_modules ./backend/node_modules
COPY --from=backend-builder --chown=nodejs:nodejs /app/backend/package.json ./backend/
# Copy SQL schema files that aren't compiled
COPY --from=backend-builder --chown=nodejs:nodejs /app/backend/src/database/*.sql ./backend/dist/database/

# Copy built frontend static files
COPY --from=frontend-builder --chown=nodejs:nodejs /app/frontend/dist ./frontend/dist

# Copy data files for seeding
COPY --chown=nodejs:nodejs KindleHighlights.txt ./KindleHighlights.txt
COPY --chown=nodejs:nodejs reading-list.txt ./reading-list.txt

# Copy startup script
COPY --chown=nodejs:nodejs scripts/docker-entrypoint.sh ./docker-entrypoint.sh
RUN chmod +x ./docker-entrypoint.sh

# Create directories for data persistence and logs
RUN mkdir -p /app/data /app/logs /app/tmp && \
    chown -R nodejs:nodejs /app/data /app/logs /app/tmp

# Set environment variables optimized for Raspberry Pi
ENV NODE_ENV=production \
    PORT=3003 \
    DATABASE_PATH=/app/data/reading-tracker.db \
    NODE_OPTIONS="--max-old-space-size=256 --max-semi-space-size=32" \
    UV_THREADPOOL_SIZE=4

# Switch to non-root user
USER nodejs

# Expose application port
EXPOSE 3003

# Add comprehensive health check optimized for Pi
HEALTHCHECK --interval=60s --timeout=15s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:3003/api/health || exit 1

# Use tini for proper signal handling and zombie reaping (better for Pi)
ENTRYPOINT ["tini", "--"]

# Start the application with seeding via entrypoint script
CMD ["/bin/sh", "./docker-entrypoint.sh"]